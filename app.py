from dotenv import load_dotenv
load_dotenv()
import os
import streamlit as st
import sqlite3
import google.generativeai as genai

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

def get_gemini_response(question, prompt):
    model = genai.GenerativeModel('gemini-2.5-flash')
    response = model.generate_content([prompt[0], question])
    return response.text

def read_sql_query(sql, db):
    conn = sqlite3.connect(db)
    cur = conn.cursor()
    cur.execute(sql)
    rows = cur.fetchall()
    conn.commit()
    conn.close()    
    for row in rows:
        print(row)
    return rows

###define prompts

prompt = ["""
You are an intelligent SQL query generator.
You will be given a question in plain English about a database.

The database has the following table:

Table name: STUDENT
Columns:
1. NAME (TEXT)
2. CLASS (TEXT)
3. SELECTION (TEXT)
4. MARKS (INTEGER)

Your task:
- Convert the user's natural language question into a valid **SQLite SQL command**.
- Return only the SQL command as plain text (no explanations, no formatting).
- Use correct SQLite syntax.
- Always use the table and column names exactly as defined above.

Examples:

Q: Show all students
A: SELECT * FROM STUDENT;

Q: Show students who scored above 50 marks
A: SELECT * FROM STUDENT WHERE MARKS > 50;

Q: Show all students from class Gen AI
A: SELECT * FROM STUDENT WHERE CLASS = 'Gen AI';

Q: Show names and marks of students with grade A
A: SELECT NAME, MARKS FROM STUDENT WHERE SELECTION = 'A';

Q: Show the highest scoring student
A: SELECT * FROM STUDENT ORDER BY MARKS DESC LIMIT 1;

Q: Show average marks of all students
A: SELECT AVG(MARKS) FROM STUDENT;

Q: List students who failed (marks less than 40)
A: SELECT * FROM STUDENT WHERE MARKS < 40;

Now generate the SQL query for the user's question.
"""]

#streamlit App

st.set_page_config(page_title="AI SQL Query Generator", page_icon=":robot_face:")

st.image("https://img.freepik.com/free-vector/robot-with-laptop-cartoon-icon-illustration-technology-education-icon-concept-isolated-flat-cartoon-style_138676-2831.jpg?w=740&t=st=1697044864~exp=1697045464~hmac=3f3f3f6f5e8e4e1b7c6e8e2f5a6b7c8d9e0f1a2b3c4d5e6f7g8h9i0j1k2l3m4", width = 200)

st.markdown("# AI SQL Query Generator")
st.markdown("Ask questions about the STUDENT database and get SQL queries generated by Gemini-1.5 Pro!")

question = st.text_input("Enter your question about the STUDENT database:", key = "input") 

submit = st.button("Generate SQL Query")

if submit:
    response = get_gemini_response(question, prompt)
    print("Generated SQL Query:", response)
    response = read_sql_query(response, 'student.db')
    st.subheader("Response is:")
    for row in response:
        print(row)
        st.header(row)